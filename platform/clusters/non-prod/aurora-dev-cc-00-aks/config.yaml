version: '0.0.25'

settings: |

  global:
    apiServerCidr: "192.0.2.32/27"
    azureMetadataApiCidr: "169.254.169.254/32"

    # alertManagerCidrs: ["203.0.113.0/32"]
    # loggingCidrs: ["203.0.113.0/32"]
    # vaultCidrs: ["203.0.113.1/32"]

    clusterHasLoki: false

    cluster: aurora-dev-cc-00-aks

    # helm:
    #   repository: https://gccloudone-aurora.github.io/aurora-platform-charts

    # container:
    #   registry: ghcr.io/gccloudone-aurora

    ingressDomain: aurora-dev-cc-00.cloud-nuage.canada.ca
    ingressClassName: ingress-istio-controller

    load_balancer_subnet_name: '<path:kv999999argocd#aurora-dev-cc-00-load-balancer-subnet-name>'
    subscriptionId: '<path:kv999999argocd#aurora-dev-cc-00-subscription-id>'
    tenantId: '<path:kv999999argocd#aurora-dev-cc-00-tenant-id>'

  core:
    components:
      aadPodIdentity:
        enabled: true

        mic: {}

        nmi: {}

      auroraController:
        enabled: true

        image:
          tag: main

        prometheus:
          enabled: false
          servicemonitor:
            enabled: false

        aurora:
          secretDockerConfigJson: '<path:kv999999argocd#aurora-dev-cc-00-image-pull-secret>'

      certManager:
        enabled: true

        webhook: {}

        cainjector: {}

        acmesolver: {}

        startupapicheck: {}

        aadPodIdentity:
          azureManagedIdentity:
            clientId: '<path:kv999999argocd#aurora-dev-cc-00-certmanager-aadpodidentity-client-id>'
            resourceId: '<path:kv999999argocd#aurora-dev-cc-00-certmanager-aadpodidentity-resource-id>'

        prometheus:
          enabled: false
          servicemonitor:
            enabled: false

        # dns01RecursiveNameservers: "Comma separated values with <IP ADRESS>:<PORT>"
        # dns01RecursiveNameserversOnly: true

        podDnsConfig:
          nameservers:
            - 1.1.1.1
            - 8.8.8.8

        issuers:
          email: aurora-aurore@ssc-spc.gc.ca
          # caBundle: "BASE64 Encoded String"
          dns01:
            azure:
              zone: cloud-nuage.canada.ca
              resourceGroupName: RESOURCE_GROUP_NAME
              subscriptionId: 99999999-9999-9999-9999-999999999999

      cidrAllocator:
        enabled: true

        image:
          tag: main

        prometheus:
          enabled: false
          servicemonitor:
            enabled: false

        secretDockerConfigJson: '<path:kv999999argocd#aurora-dev-cc-00-image-pull-secret>'

        addressPools:
        - 192.0.4.0/23

      cilium:
        enabled: true

        secretDockerConfigJson: '<path:kv999999argocd#aurora-dev-cc-00-image-pull-secret>'

        enableIPv4Masquerade: true

        ciliumBGPPeeringPolicy:
          virtualRouters:
          - exportPodCIDR: true
            localASN: 64512
            neighbors:
            - peerASN: 64512
              peerAddress: 192.0.2.228/32

      fluentOperator:
        enabled: false

        operator:
          initContainer: {}

        fluentd:
          output:
            loki:
              enable: true
              url: "https://loki.cloud-nuage.canada.ca"
              username: '<path:kv999999argocd#aurora-dev-cc-00-loki-user>'
              password: '<path:kv999999argocd#aurora-dev-cc-00-loki-password>'

      gatekeeper:
        enabled: true

        postInstall:
          probeWebhook: {}

        postUpgrade: {}

        preUninstall: {}

        audit: {}

        controllerManager: {}

        crds: {}

        templates:
          repository: https://github.com/gccloudone-aurora/gatekeeper-policies.git
          path: .
          targetRevision: main

        constraints:
          gatewayContainerAllowedImages:
            allowedRepos:
              - ghcr.io/
              - docker.io/
              - mcr.microsoft.com/
              - quay.io/
          restrictPodAnnotations:
            excludedNamespaces:
              - 'logstash'
          systemContainerAllowedImages:
            allowedRepos:
              - ghcr.io/
              - docker.io/
              - mcr.microsoft.com/
              - quay.io/
          solutionContainerAllowedImages:
            allowedRepos:
              - ghcr.io/
              - docker.io/
              - mcr.microsoft.com/
              - quay.io/

      kubecost:
        enabled: false

        frontend: {}

        costModel: {}

        networkCosts: {}

        clusterController: {}

        token: '<path:kv999999argocd#aurora-dev-cc-00-kubecost-token>'

        azure:
          subscriptionId: '<path:kv999999argocd#aurora-dev-cc-00-subscription-id>'
          clientId: '<path:kv999999argocd#aurora-dev-cc-00-kubecost-sp-client-id>'
          clientPassword: '<path:kv999999argocd#aurora-dev-cc-00-kubecost-sp-client-secret>'
          tenantId: '<path:kv999999argocd#aurora-dev-cc-00-tenant-id>'

        cloudServiceKey: '<path:kv999999argocd#aurora-dev-cc-00-kubecost-cloud-service-key>'
        productKey: '<path:kv999999argocd#aurora-dev-cc-00-kubecost-product-key>'

      kubernetesEventExporter:
        enabled: false

        config:
          output:
            loki:
              url: "https://loki.cloud-nuage.canada.ca/loki/api/v1/push"
              authorization: '<path:kv999999argocd#aurora-dev-cc-00-loki-authorization>'

      ntp:
        enabled: true

      podtracker:
        enabled: true

        image:
          tag: main

        prometheus:
          enabled: false
          servicemonitor:
            enabled: false

      prometheus:
        enabled: false

        azure:
          clientId: '<path:kv999999argocd#aurora-dev-cc-00-grafana-sp-client-id>'
          clientPassword: '<path:kv999999argocd#aurora-dev-cc-00-grafana-sp-client-secret>'

        operator:
          admissionWebhooks: {}

          prometheusConfigReloader: {}

          thanos: {}

        alertmanager:
          enabled: false

        prometheus:
          prometheusSpec: {}

        thanosRuler:
          thanosRulerSpec: {}

        grafana:
          adminPassword: '<path:kv999999argocd#aurora-dev-cc-00-grafana-admin-password>'
          authUrl: "https://login.microsoftonline.com/<path:kv999999argocd#aurora-dev-cc-00-tenant-id>/oauth2/v2.0/authorize"
          tokenUrl: "https://login.microsoftonline.com/<path:kv999999argocd#aurora-dev-cc-00-tenant-id>/oauth2/v2.0/token"

          downloadDashboards: {}

          initChownData: {}

          sidecar: {}

          lokiDataSource:
            url: "http://loki-gateway.loki.svc.cluster.local"
            user: '<path:kv999999argocd#aurora-dev-cc-00-loki-user>'
            password: '<path:kv999999argocd#aurora-dev-cc-00-loki-password>'

        kubeStateMetrics: {}

        prometheusNodeExporter: {}

        blackboxExporter:
          istioIngressGatewayProbes:
            - name: istio-ingress-gateway-aurora-dev
              ipAddress: 192.0.2.32

        msteams:
          connectors:
            alertTesting: '<path:kv999999argocd#aurora-dev-cc-00-alertmanager-notifications-msteams-connector-testing>'
            prodCritical: '<path:kv999999argocd#aurora-dev-cc-00-alertmanager-notifications-msteams-connector-prod-critical>'
            prodMajor: '<path:kv999999argocd#aurora-dev-cc-00-alertmanager-notifications-msteams-connector-prod-major>'
            prodMinor: '<path:kv999999argocd#aurora-dev-cc-00-alertmanager-notifications-msteams-connector-prod-minor>'
            nonProdCritical: '<path:kv999999argocd#aurora-dev-cc-00-alertmanager-notifications-msteams-connector-non-prod-critical>'
            nonProdMajor: '<path:kv999999argocd#aurora-dev-cc-00-alertmanager-notifications-msteams-connector-non-prod-major>'
            nonProdMinor: '<path:kv999999argocd#aurora-dev-cc-00-alertmanager-notifications-msteams-connector-non-prod-minor>'
            devCritical: '<path:kv999999argocd#aurora-dev-cc-00-alertmanager-notifications-msteams-connector-dev-critical>'
            devMajor: '<path:kv999999argocd#aurora-dev-cc-00-alertmanager-notifications-msteams-connector-dev-major>'
            devMinor: '<path:kv999999argocd#aurora-dev-cc-00-alertmanager-notifications-msteams-connector-dev-minor>'

        jiralert:
          config:
            apiURL: '<path:kv999999argocd#aurora-dev-cc-00-alertmanager-notifications-jira-api-url>'
            project: 'AUR'
            user: '<path:kv999999argocd#aurora-dev-cc-00-alertmanager-notifications-jira-user>'
            password: '<path:kv999999argocd#aurora-dev-cc-00-alertmanager-notifications-jira-password>'

        priorityClassName: platform-cluster-critical

      vaultAgent:
        enabled: false

        injector:
          externalVaultAddr: https://vault.cloud-nuage.canada.ca

          agentImage: {}

      velero:
        enabled: false

        backupStorage:
          bucket: velero
          resourceGroupName: '<path:kv999999argocd#aurora-dev-cc-00-velero-sa-resource-group-name>'
          storageAccountName: '<path:kv999999argocd#aurora-dev-cc-00-velero-sa-name>'
          subscriptionId: '<path:kv999999argocd#aurora-dev-cc-00-subscription-id>'

        volumeSnapshot:
          resourceGroupName: '<path:kv999999argocd#aurora-dev-cc-00-velero-sa-resource-group-name>'

        aadPodIdentity:
          azureManagedIdentity:
            clientId: '<path:kv999999argocd#aurora-dev-cc-00-velero-aadpodidentity-client-id>'
            resourceId: '<path:kv999999argocd#aurora-dev-cc-00-velero-aadpodidentity-resource-id>'

  app:
    enabled: true

    components:
      argoController:
        enabled: false

        image:
          registry: "artifactory.cloud.statcan.ca/docker-k8scc01covidacr-remote"
          repository: argo-controller

        storageAccount:
          name: '<path:kv999999argocd#aurora-dev-cc-00-argo-workflow-sa-name>'
          primaryAccessKey: '<path:kv999999argocd#aurora-dev-cc-00-argo-workflow-sa-key>'

      argoWorkflow:
        enabled: false

        workflow:
          controller: {}

          executor: {}

          server: {}

          storageAccount:
            name: '<path:kv999999argocd#aurora-dev-cc-00-argo-workflow-sa-name>'
            primaryBlobEndpoint: '<path:kv999999argocd#aurora-dev-cc-00-argo-workflow-sa-endpoint>'
            primaryAccessKey: '<path:kv999999argocd#aurora-dev-cc-00-argo-workflow-sa-key>'

          sso:
            issuerUrl: "https://login.microsoftonline.com/<path:kv999999argocd#aurora-dev-cc-00-tenant-id>/v2.0"
            clientId: '<path:kv999999argocd#aurora-dev-cc-00-argo-workflow-sp-client-id>'
            clientSecret: '<path:kv999999argocd#aurora-dev-cc-00-argo-workflow-sp-client-secret>'

      elastic:
        enabled: false

      istio:
        enabled: true

        gateway:
          additionalDnsNames:
            - '*.cloud-nuage.canada.ca'
            - '*.aurora-dev-cc-00.cloud-nuage.canada.ca'

        ingressIstioController:
          image:
            tag: main

        istiod:
          pilot: {}

          proxy: {}

      kiali:
        enabled: false

        instances:
          - name: kiali
            grafana:
              token: '<path:kv999999argocd#aurora-dev-cc-00-kiali-grafana-token>'

      sidecarTerminator:
        enabled: true

        image:
          tag: main

      solr:
          enabled: false

  mgmt:
    # This should be set to true when not using the bootstrap cluster and wish to transfer control
    enabled: false

    components:
      argoFoundation:
        argocdInstance:
          adminSecurityGroup: 99999999-9999-9999-9999-999999999999
          disableAdmin: true
          ingressDomain: platform.aurora-dev-cc-00.cloud-nuage.canada.ca
          argocdVaultPlugin:
            credentials:
              azureClientID: '<path:kv999999argocd#common-dev-cc-00-argocd-kv-aadpodidentity-client-id>'
          oidcAuthSP:
            credentials:
              tenantID: '<path:kv999999argocd#aurora-dev-cc-00-tenant-id>'
              clientID: '<path:kv999999argocd#aurora-dev-cc-00-argocd-oidc-sp-client-id>'
              clientSecret: '<path:kv999999argocd#aurora-dev-cc-00-argocd-oidc-sp-client-secret>'
          aadPodIdentity:
            enabled: true
            managedIdentity:
              clientID: '<path:kv999999argocd#common-dev-cc-00-argocd-kv-aadpodidentity-client-id>'
              resourceID: '<path:kv999999argocd#common-dev-cc-00-argocd-kv-aadpodidentity-resource-id>'
          notifications:
            enabled: true
          netpol:
            enabled: true
          server:
            service:
              type: "ClusterIP"
            resources:
              limits:
                cpu: '1'
                memory: 1000Mi
              requests:
                cpu: 250m
                memory: 500Mi
          register:
            clusters:
              aurora-dev-cc-00:
                server: "<path:kv999999argocd#aurora-dev-cc-00-server>"
                token: "<path:kv999999argocd#aurora-dev-cc-00-argocd-sa-bearer-token>"
                caData: "<path:kv999999argocd#aurora-dev-cc-00-argocd-sa-cacert | base64encode>"
            repositories:
              aurora-helm:
                type: helm
                url: https://gccloudone-aurora.github.io/aurora-platform-charts
              project-aurora:
                type: git
                url: https://github.com/gccloudone-aurora/aurora-template-example.git
            repositoryCreds:
              private-repo-creds:
                type: git
                url: https://github.com/gccloudone-aurora/aurora-template-example.git
                username: "<path:kv999999argocd#aurora-dev-cc-00-github-username>"
                password: "<path:kv999999argocd#aurora-dev-cc-00-github-password>"
        argocdProjects:
          platform:
            applicationSet:
              generator:
                git:
                  repoURL: https://github.com/gccloudone-aurora/aurora-template-example.git
                  revision: main
                  files:
                    - path: platform/clusters/non-prod/**/config.yaml
              template:
                source:
                  repoURL: https://gccloudone-aurora.github.io/aurora-platform-charts
          solutions:
            applicationSet:
              generator:
                git:
                  repoURL: https://github.com/gccloudone-aurora/aurora-template-example.git
                  revision: main
                  files:
                    - path: platform/namespaces/**/config.yaml
              template:
                source:
                  repoURL: https://gccloudone-aurora.github.io/aurora-platform-charts

      argoOperator: {}

      billOfLanding:
        enabled: false
